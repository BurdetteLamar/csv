#!/usr/bin/env ruby

require 'optparse'
require 'csv'

def ansi(n, s)
  # return s unless $stdout.tty?
  "\e[#{n}m#{s}\e[0m"
end

def tt(s);                ansi(12, s    ); end
def italic(s);            ansi(3,  s)    ; end
def command_name(s);      ansi(34, tt(s)); end
def place_holder_name(s); ansi( 3, tt(s)); end
def var_name(s);          ansi(35, tt(s)); end
def option_name(s);       ansi(33, tt(s)); end

def parse_converters(s)
  converters = []
  s.split(',').each do |name|
    name.sub(/^:/, '')
    sym = name.to_sym
    converters.push(name)
  end
  converters
end

options = {}

OptionParser.new do |p|

  p.program_name = File.basename $0
  p.version = CSV::VERSION
  p.release = nil
  p.summary_indent = ' ' * 4
  p.banner = <<-EOF
Usage: #{command_name(p.program_name)} [#{place_holder_name('options')}]

  Reads and parses the CSV text content of #{var_name('$stdin')} per the given input options.
  From that content, generates CSV text per the given output options and writes
  that text to #{var_name('$stdout')}.

  Three options are similar for input and output:

  - Row separator:
  
    - The #{italic('input')} row separator is determined:
  
      - By option #{option_name('--input_row_sep')}, if given.
      - Otherwise, by option #{option_name('--row_sep')}, if given.
      - Otherwise, by auto-discovery.
  
    - The #{italic('output')} row separator is determined:
  
      - By option #{option_name('--output_row_sep')} if given.
      - Otherwise, by option #{option_name('--row_sep')} if given.
      - Otherwise, as the newline character ("\\n").
  
  - Column separator:
  
    - The #{italic('input')} column separator is determined:
  
      - By option #{option_name('--input_col_sep')}, if given.
      - Otherwise, by option #{option_name('--col_sep')}, if given.
      - Otherwise, as the comma character (',').
  
    - The #{italic('output')} column separator is determined:
  
      - By option #{option_name('--output_col_sep')} if given.
      - Otherwise, by option #{option_name('--col_sep')} if given.
      - Otherwise, as the comma character (',').
  
  - Quote character:
  
    - The #{italic('input')} quote character is determined:
  
      - By option #{option_name('--input_quote_char')}, if given.
      - Otherwise, by option #{option_name('--quote_char')}, if given.
      - Otherwise, as the double-quote character ('"').
  
    - The #{italic('output')} quote character is determined:
  
      - By option #{option_name('--output_quote_char')}, if given.
      - Otherwise, by option #{option_name('--quote_char')}, if given.
      - Otherwise, as the double-quote character ('"').
EOF

  p.separator(nil)
  p.separator(
    'Input Options: see https://docs.ruby-lang.org/en/3.3/CSV.html#class-CSV-label-Options+for+Parsing.'
  )

  p.separator(nil)
  p.on('--converters STR',
       'Input field converters;',
       'STR is comma-separated converter names (leading colon optional).'
       ) do |value|
    options[:converters] = parse_converters(value)
  end
  p.on('--empty_value STR',
       'Value to be output for empty input field.') do |value|
    options[:empty_value] = value
  end
  p.on('--headers',
       'Treat the first input row as headers.') do
    options[:headers] = true
  end
  p.on('--header_converters STR',
       'Input header converters;',
       'STR is comma-separated converter names (leading colon optional).'
  ) do |value|
    options[:header_converters] = parse_converters(value)
  end
  p.on('--input_col_sep STR',
       'Input column separator.') do |value|
    options[:input_col_sep] = value
  end
  p.on('--input_quote_char CHAR',
       'Input quote character.') do |value|
    options[:input_quote_char] = value
  end
  p.on('--input_row_sep STR',
       'Input row separator.'
  ) do |value|
    options[:input_row_sep] = value
  end
  p.on('--liberal_parsing',
       'Attempt to parse non-conformant input.') do
    options[:liberal_parsing] = true
  end
  p.on('--max_field_size N',
       'Maximum field size (characters)') do |value|
    options[:max_field_size] = value
  end
  p.on('--nil_value STR',
       'Value to be substituted for nil input field.') do |value|
    options[:nil_value] = value
  end
  p.on('--return_headers',
       'Method shift returns header row.') do
    options[:return_headers] = true
  end
  p.on('--skip_blanks',
       'Ignore blank lines.') do
    options[:skip_blanks] = true
  end
  p.on('--skip_lines STR',
       'Ignore comment lines;',
       'STR is converted to a Regexp that identifies comment lines.') do |value|
    options[:skip_lines] = Regexp.new(value)
  end
  p.on('--strip',
       'Strip whitespace from input fields.') do
    options[:strip] = true
  end
  p.on('--unconverted_fields',
       'Define method unconverted_fields for each created CSV::Row object.') do
    options[:unconverted_fields] = true
  end

  p.separator(nil)
  p.separator(
    'Output Options: see https://docs.ruby-lang.org/en/3.3/CSV.html#class-CSV-label-Options+for+Generating.'
  )

  p.separator(nil)
  p.on('--force_quotes',
       'Double-quote each output field.') do
    options[:force_quotes] = true
  end
  p.on('--output_col_sep SEP',
       'Output column separator (string).') do |value|
    options[:output_col_sep] = value
  end
  p.on('--output_quote_char CHAR',
       'Output quote character.') do |value|
    options[:output_quote_char] = value
  end
  p.on('--output_row_sep SEP',
       'Output row separator (string).'
  ) do |value|
    options[:output_row_sep] = value
  end
  p.on('--quote_empty',
       'Double-quote each empty output field.') do
    options[:quote_empty] = true
  end
  p.on('--write_converters STR',
       'Output field converters;',
       'STR is comma-separated converter names (leading colon optional).'
  ) do |value|
    options[:write_converters] = parse_converters(value)
  end
  p.on('--write_headers',
       'Copy input headers to output.') do
    options[:write_headers] = true
  end
  p.on('--write_empty_value STR',
       'Value to be substituted for empty output field.') do |value|
    options[:write_empty_value] = value
  end
  p.on('--write_nil_value STR',
       'Value to be substituted for nil output field.') do |value|
    options[:write_nil_value] = value
  end

  p.separator(nil)
  p.separator('Input/Output Options')

  p.separator(nil)
  p.on('-c', '--col_sep SEP',
       'Column separator (string).') do |value|
    options[:col_sep] = value
  end
  p.on('-q', '--quote_char CHAR',
       'Quote character.') do |value|
    options[:quote_char] = value
  end
  p.on('-r', '--row_sep SEP',
       'Row separator (string).'
  ) do |value|
    options[:row_sep] = value
  end

  p.separator(nil)
  p.separator('Generic Options')
  p.separator(nil)

  p.on('-h', '--help', 'Prints this help.') do
    puts p
    exit
  end

  p.on('-v', '--version', 'Prints version.') do
    puts CSV::VERSION
    exit
  end

end.parse!

CSV.filter(**options) do |row|
end

