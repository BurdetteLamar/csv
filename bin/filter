#!/usr/bin/env ruby

require 'optparse'
require 'csv'

def ansi(n, s)
  # return s unless $stdout.tty?
  "\e[#{n}m#{s}\e[0m"
end

def tt(s);                ansi(12, s    ); end
def italic(s);            ansi(3,  s)    ; end
def command_name(s);      ansi(34, tt(s)); end
def place_holder_name(s); ansi( 3, tt(s)); end
def var_name(s);          ansi(35, tt(s)); end
def option_name(s);       ansi(33, tt(s)); end

options = {}

OptionParser.new do |p|

  p.program_name = File.basename $0
  p.version = CSV::VERSION
  p.release = nil
  p.summary_indent = ' ' * 4
  p.banner = <<-EOF
Usage: #{command_name(p.program_name)} [#{place_holder_name('options')}]

  Reads and parses the CSV text content of #{var_name('$stdin')} per the given input options.
  From that content, generates CSV text per the given output options and writes
  that text to #{var_name('$stdout')}.

  Three options are similar for input and output:

  - Row separator:
  
    - The #{italic('input')} row separator is determined:
  
      - By option #{option_name('--input_row_sep')}, if given.
      - Otherwise, by option #{option_name('--row_sep')}, if given.
      - Otherwise, by auto-discovery.
  
    - The #{italic('output')} row separator is determined:
  
      - By option #{option_name('--output_row_sep')} if given.
      - Otherwise, by option #{option_name('--row_sep')} if given.
      - Otherwise, as the newline character ("\\n").
  
  - Column separator:
  
    - The #{italic('input')} column separator is determined:
  
      - By option #{option_name('--input_col_sep')}, if given.
      - Otherwise, by option #{option_name('--col_sep')}, if given.
      - Otherwise, as the comma character (',').
  
    - The #{italic('output')} column separator is determined:
  
      - By option #{option_name('--output_col_sep')} if given.
      - Otherwise, by option #{option_name('--col_sep')} if given.
      - Otherwise, as the comma character (',').
  
  - Quote character:
  
    - The #{italic('input')} quote character is determined:
  
      - By option #{option_name('--input_quote_char')}, if given.
      - Otherwise, by option #{option_name('--quote_char')}, if given.
      - Otherwise, as the double-quote character ('"').
  
    - The #{italic('output')} quote character is determined:
  
      - By option #{option_name('--output_quote_char')}, if given.
      - Otherwise, by option #{option_name('--quote_char')}, if given.
      - Otherwise, as the double-quote character ('"').
EOF

  p.separator(nil)
  p.separator(
    'Input Options: see https://docs.ruby-lang.org/en/3.3/CSV.html#class-CSV-label-Options+for+Parsing.'
  )

  p.separator(nil)
  p.on('--input_row_sep SEP',
       'Input row separator (string).'
       ) do |value|
    options[:input_row_sep] = value
  end
  p.on('--input_col_sep SEP',
       'Input column separator (string).') do |value|
    options[:input_col_sep] = value
  end
  p.on('--input_quote_char CHAR',
       'Input quote character.') do |value|
    options[:input_quote_char] = value
  end

  p.separator(nil)
  p.separator(
    'Output Options: see https://docs.ruby-lang.org/en/3.3/CSV.html#class-CSV-label-Options+for+Generating.'
  )

  p.separator(nil)
  p.on('--output_row_sep SEP',
       'Output row separator (string).'
  ) do |value|
    options[:output_row_sep] = value
  end
  p.on('--output_col_sep SEP',
       'Output column separator (string).') do |value|
    options[:output_col_sep] = value
  end
  p.on('--output_quote_char CHAR',
       'Output quote character.') do |value|
    options[:output_quote_char] = value
  end

  p.separator(nil)
  p.separator('Input/Output Options')

  p.separator(nil)
  p.on('--row_sep SEP',
       'Row separator (string).'
  ) do |value|
    options[:row_sep] = value
  end
  p.on('--col_sep SEP',
       'Column separator (string).') do |value|
    options[:col_sep] = value
  end
  p.on('--quote_char CHAR',
       'Quote character.') do |value|
    options[:quote_char] = value
  end

  p.separator(nil)
  p.separator('Generic Options')
  p.separator(nil)

  p.on('-h', '--help', 'Prints this help.') do
    puts p
    exit
  end

  p.on('-v', '--version', 'Prints version.') do
    puts CSV::VERSION
    exit
  end

end.parse!

CSV.filter(**options) do |row|
end

